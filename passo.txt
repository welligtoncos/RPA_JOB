
Configuração do Ambiente e Criação do Projeto Django
# Criar um ambiente virtual
python -m venv env

# Ativar o ambiente virtual
# No Windows:
venv\Scripts\activate
# No macOS/Linux:
source env/bin/activate

python.exe -m pip install --upgrade pip

# Instalar os pacotes necessários
pip install django djangorestframework

# Criar um novo projeto Django
django-admin startproject projeto_selecao_aleatoria

# Entrar na pasta do projeto
cd projeto_selecao_aleatoria

# Criar uma aplicação
python manage.py startapp core

Configuração do Django REST Framework
Vamos configurar o Django REST Framework no arquivo settings.py:

# projeto_selecao_aleatoria/settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Adicionar o REST Framework
    'core',  # Adicionar o app que criamos
]

# Configurações do REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}

# Gerar arquivos de migração
python manage.py makemigrations

# Aplicar migrações ao banco de dados
python manage.py migrate

python manage.py createsuperuser

pip install setuptools

 python manage.py runserver 

 pip install -r requirements.txt


# Construir a imagem
docker build -t rpa-test:1.0 .

# Testar a imagem (executa com 8 passos)
docker run --rm rpa-test:1.0 8

docker build -t rpa-massa:1.0 .
docker run --rm rpa-massa:1.0 8

docker build -t rpa-homologacao:1.0 .

python teste_processamento_massa.py


Construa a imagem Docker com docker build -t meu-rpa:1.0 .
Configure a URL no urls.py para apontar para o novo ViewSet
Use a API para iniciar um processamento, enviando a imagem Docker e comando necessários